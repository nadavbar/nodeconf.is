_MagnetometerAccuracy = function () {
  this.unknown = 0;
  this.unreliable = 1;
  this.approximate = 2;
  this.high = 3;
}
exports.MagnetometerAccuracy = new _MagnetometerAccuracy();

_SimpleOrientation = function () {
  this.notRotated = 0;
  this.rotated90DegreesCounterclockwise = 1;
  this.rotated180DegreesCounterclockwise = 2;
  this.rotated270DegreesCounterclockwise = 3;
  this.faceup = 4;
  this.facedown = 5;
}
exports.SimpleOrientation = new _SimpleOrientation();

Accelerometer = (function () {
  var cls = function Accelerometer() {
    this.reportInterval = new Number();
    this.minimumReportInterval = new Number();
  };
  

  cls.prototype.getCurrentReading = function getCurrentReading() {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <returns type="AccelerometerReading" />
    /// </signature>
    return new AccelerometerReading();
  }


  cls.getDefault = function getDefault() {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <returns type="Accelerometer" />
    /// </signature>
    return new Accelerometer();
  }


    cls.prototype.addListener = function addListener(eventName, callback){}
    cls.prototype.removeListener = function removeListener(eventName, callback){}
    cls.prototype.on = function on(eventName, callback){}
    cls.prototype.off = function off(eventName, callback){}
  return cls;
}) ();
exports.Accelerometer = Accelerometer;

AccelerometerReading = (function () {
  var cls = function AccelerometerReading() {
    this.accelerationX = new Number();
    this.accelerationY = new Number();
    this.accelerationZ = new Number();
    this.timestamp = new Date();
  };
  

  return cls;
}) ();
exports.AccelerometerReading = AccelerometerReading;

AccelerometerReadingChangedEventArgs = (function () {
  var cls = function AccelerometerReadingChangedEventArgs() {
    this.reading = new AccelerometerReading();
  };
  

  return cls;
}) ();
exports.AccelerometerReadingChangedEventArgs = AccelerometerReadingChangedEventArgs;

AccelerometerShakenEventArgs = (function () {
  var cls = function AccelerometerShakenEventArgs() {
    this.timestamp = new Date();
  };
  

  return cls;
}) ();
exports.AccelerometerShakenEventArgs = AccelerometerShakenEventArgs;

Inclinometer = (function () {
  var cls = function Inclinometer() {
    this.reportInterval = new Number();
    this.minimumReportInterval = new Number();
  };
  

  cls.prototype.getCurrentReading = function getCurrentReading() {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <returns type="InclinometerReading" />
    /// </signature>
    return new InclinometerReading();
  }


  cls.getDefault = function getDefault() {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <returns type="Inclinometer" />
    /// </signature>
    return new Inclinometer();
  }


    cls.prototype.addListener = function addListener(eventName, callback){}
    cls.prototype.removeListener = function removeListener(eventName, callback){}
    cls.prototype.on = function on(eventName, callback){}
    cls.prototype.off = function off(eventName, callback){}
  return cls;
}) ();
exports.Inclinometer = Inclinometer;

InclinometerReading = (function () {
  var cls = function InclinometerReading() {
    this.pitchDegrees = new Number();
    this.rollDegrees = new Number();
    this.timestamp = new Date();
    this.yawDegrees = new Number();
    this.yawAccuracy = new MagnetometerAccuracy();
  };
  

  return cls;
}) ();
exports.InclinometerReading = InclinometerReading;

InclinometerReadingChangedEventArgs = (function () {
  var cls = function InclinometerReadingChangedEventArgs() {
    this.reading = new InclinometerReading();
  };
  

  return cls;
}) ();
exports.InclinometerReadingChangedEventArgs = InclinometerReadingChangedEventArgs;

Gyrometer = (function () {
  var cls = function Gyrometer() {
    this.reportInterval = new Number();
    this.minimumReportInterval = new Number();
  };
  

  cls.prototype.getCurrentReading = function getCurrentReading() {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <returns type="GyrometerReading" />
    /// </signature>
    return new GyrometerReading();
  }


  cls.getDefault = function getDefault() {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <returns type="Gyrometer" />
    /// </signature>
    return new Gyrometer();
  }


    cls.prototype.addListener = function addListener(eventName, callback){}
    cls.prototype.removeListener = function removeListener(eventName, callback){}
    cls.prototype.on = function on(eventName, callback){}
    cls.prototype.off = function off(eventName, callback){}
  return cls;
}) ();
exports.Gyrometer = Gyrometer;

GyrometerReading = (function () {
  var cls = function GyrometerReading() {
    this.angularVelocityX = new Number();
    this.angularVelocityY = new Number();
    this.angularVelocityZ = new Number();
    this.timestamp = new Date();
  };
  

  return cls;
}) ();
exports.GyrometerReading = GyrometerReading;

GyrometerReadingChangedEventArgs = (function () {
  var cls = function GyrometerReadingChangedEventArgs() {
    this.reading = new GyrometerReading();
  };
  

  return cls;
}) ();
exports.GyrometerReadingChangedEventArgs = GyrometerReadingChangedEventArgs;

Compass = (function () {
  var cls = function Compass() {
    this.reportInterval = new Number();
    this.minimumReportInterval = new Number();
  };
  

  cls.prototype.getCurrentReading = function getCurrentReading() {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <returns type="CompassReading" />
    /// </signature>
    return new CompassReading();
  }


  cls.getDefault = function getDefault() {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <returns type="Compass" />
    /// </signature>
    return new Compass();
  }


    cls.prototype.addListener = function addListener(eventName, callback){}
    cls.prototype.removeListener = function removeListener(eventName, callback){}
    cls.prototype.on = function on(eventName, callback){}
    cls.prototype.off = function off(eventName, callback){}
  return cls;
}) ();
exports.Compass = Compass;

CompassReading = (function () {
  var cls = function CompassReading() {
    this.headingMagneticNorth = new Number();
    this.headingTrueNorth = new Number();
    this.timestamp = new Date();
    this.headingAccuracy = new MagnetometerAccuracy();
  };
  

  return cls;
}) ();
exports.CompassReading = CompassReading;

CompassReadingChangedEventArgs = (function () {
  var cls = function CompassReadingChangedEventArgs() {
    this.reading = new CompassReading();
  };
  

  return cls;
}) ();
exports.CompassReadingChangedEventArgs = CompassReadingChangedEventArgs;

LightSensor = (function () {
  var cls = function LightSensor() {
    this.reportInterval = new Number();
    this.minimumReportInterval = new Number();
  };
  

  cls.prototype.getCurrentReading = function getCurrentReading() {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <returns type="LightSensorReading" />
    /// </signature>
    return new LightSensorReading();
  }


  cls.getDefault = function getDefault() {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <returns type="LightSensor" />
    /// </signature>
    return new LightSensor();
  }


    cls.prototype.addListener = function addListener(eventName, callback){}
    cls.prototype.removeListener = function removeListener(eventName, callback){}
    cls.prototype.on = function on(eventName, callback){}
    cls.prototype.off = function off(eventName, callback){}
  return cls;
}) ();
exports.LightSensor = LightSensor;

LightSensorReading = (function () {
  var cls = function LightSensorReading() {
    this.illuminanceInLux = new Number();
    this.timestamp = new Date();
  };
  

  return cls;
}) ();
exports.LightSensorReading = LightSensorReading;

LightSensorReadingChangedEventArgs = (function () {
  var cls = function LightSensorReadingChangedEventArgs() {
    this.reading = new LightSensorReading();
  };
  

  return cls;
}) ();
exports.LightSensorReadingChangedEventArgs = LightSensorReadingChangedEventArgs;

SensorRotationMatrix = (function () {
  var cls = function SensorRotationMatrix() {
    this.m11 = new Number();
    this.m12 = new Number();
    this.m13 = new Number();
    this.m21 = new Number();
    this.m22 = new Number();
    this.m23 = new Number();
    this.m31 = new Number();
    this.m32 = new Number();
    this.m33 = new Number();
  };
  

  return cls;
}) ();
exports.SensorRotationMatrix = SensorRotationMatrix;

SensorQuaternion = (function () {
  var cls = function SensorQuaternion() {
    this.w = new Number();
    this.x = new Number();
    this.y = new Number();
    this.z = new Number();
  };
  

  return cls;
}) ();
exports.SensorQuaternion = SensorQuaternion;

OrientationSensor = (function () {
  var cls = function OrientationSensor() {
    this.reportInterval = new Number();
    this.minimumReportInterval = new Number();
  };
  

  cls.prototype.getCurrentReading = function getCurrentReading() {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <returns type="OrientationSensorReading" />
    /// </signature>
    return new OrientationSensorReading();
  }


  cls.getDefault = function getDefault() {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <returns type="OrientationSensor" />
    /// </signature>
    return new OrientationSensor();
  }


    cls.prototype.addListener = function addListener(eventName, callback){}
    cls.prototype.removeListener = function removeListener(eventName, callback){}
    cls.prototype.on = function on(eventName, callback){}
    cls.prototype.off = function off(eventName, callback){}
  return cls;
}) ();
exports.OrientationSensor = OrientationSensor;

OrientationSensorReading = (function () {
  var cls = function OrientationSensorReading() {
    this.quaternion = new SensorQuaternion();
    this.rotationMatrix = new SensorRotationMatrix();
    this.timestamp = new Date();
    this.yawAccuracy = new MagnetometerAccuracy();
  };
  

  return cls;
}) ();
exports.OrientationSensorReading = OrientationSensorReading;

OrientationSensorReadingChangedEventArgs = (function () {
  var cls = function OrientationSensorReadingChangedEventArgs() {
    this.reading = new OrientationSensorReading();
  };
  

  return cls;
}) ();
exports.OrientationSensorReadingChangedEventArgs = OrientationSensorReadingChangedEventArgs;

SimpleOrientationSensor = (function () {
  var cls = function SimpleOrientationSensor() {
  };
  

  cls.prototype.getCurrentOrientation = function getCurrentOrientation() {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <returns type="SimpleOrientation" />
    /// </signature>
    return new SimpleOrientation();
  }


  cls.getDefault = function getDefault() {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <returns type="SimpleOrientationSensor" />
    /// </signature>
    return new SimpleOrientationSensor();
  }


    cls.prototype.addListener = function addListener(eventName, callback){}
    cls.prototype.removeListener = function removeListener(eventName, callback){}
    cls.prototype.on = function on(eventName, callback){}
    cls.prototype.off = function off(eventName, callback){}
  return cls;
}) ();
exports.SimpleOrientationSensor = SimpleOrientationSensor;

SimpleOrientationSensorOrientationChangedEventArgs = (function () {
  var cls = function SimpleOrientationSensorOrientationChangedEventArgs() {
    this.orientation = new SimpleOrientation();
    this.timestamp = new Date();
  };
  

  return cls;
}) ();
exports.SimpleOrientationSensorOrientationChangedEventArgs = SimpleOrientationSensorOrientationChangedEventArgs;

